import streamlit as st
import copy

# Define card values
cards = [{
    "A": 11,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
    "10": 10,
    "J": 10,
    "Q": 10,
    "K": 10
}]

# Initialize the deck
deck = [copy.deepcopy(cards[0]) for _ in range(4)]  # 4 independent dictionaries

# Input: Number of decks being played
question_deck = st.number_input("Number of decks being played:", min_value=1, step=1, value=1)
deck_played = [copy.deepcopy(card) for _ in range(question_deck) for card in deck]

# Player's hand
player_hand = []

# Function to get a valid card
def get_valid_card(deck_played, prompt):
    player_card = st.text_input(prompt).upper()  # Streamlit input
    if player_card:
        for card_dict in deck_played:
            if player_card in card_dict:
                value = card_dict.pop(player_card)
                return value
        st.error("Invalid card. Please try again.")
    return None

# Add cards to player's hand
if "player_hand" not in st.session_state:
    st.session_state.player_hand = []

for i in range(1, 6):  # Allow up to 5 cards
    if len(st.session_state.player_hand) < i:
        card = get_valid_card(deck_played, f"What is your card {i}?")
        if card:
            st.session_state.player_hand.append(card)

# Update player's hand
player_hand = st.session_state.player_hand

# Adjust for double aces in the first hand
if len(player_hand) == 2 and sum(player_hand) == 22:
    player_hand[0] = 10

# Display player's hand and total
st.write(f"Player's hand: {player_hand}")
st.write(f"Total sum of cards: {sum(player_hand)}")

# Calculate percentage to not burst
points_left = 21 - sum(player_hand)
count_perc = 0
number_card_left = 0

# Loop through each dictionary in the deck to count eligible cards
for deck_dict in deck_played:
    for card_value in deck_dict.values():
        if card_value <= points_left:
            count_perc += 1

# Count remaining cards
number_card_left = sum(len(deck_dict) for deck_dict in deck_played)

# Calculate and display the percentage
if number_card_left > 0:
    percentage_v2 = (count_perc / number_card_left) * 100
    st.write(f"Percentage of not bursting: {percentage_v2:.2f}%")
else:
    st.write("No cards left in the deck.")

